{"version":3,"sources":["plugins/_flag-icon.scss","abstracts/variables/_typography.scss","templates/_wpcm_staff.scss","../../node_modules/foundation-sites/scss/util/_breakpoint.scss","abstracts/variables/_colors.scss"],"names":[],"mappings":"AAgBA,WAEQ,qBAAW,CACX,uBAAa,CACb,2BAAiB,CAErB,iBAAkB,CAClB,oBAAqB,CACrB,kBAAmB,CACnB,aAAc,CACd,aAAe,CACf,0BAAmB,CAAnB,kBAAmB,CAXvB,kBAcQ,eAAgB,CAGpB,sBAEQ,qBAAW,CACX,uBAAa,CACb,2BAAiB,CAErB,0BAAmB,CAAnB,kBAAmB,CACnB,sBAAuB,CACvB,aAAc,CACd,OAAQ,CACR,QAAS,CAGb,mBACI,SAAU,CAIV,qWACI,6CAAuB,CAK3B,uBACI,6CAAuB,CAK3B,oFACI,6CAAuB,CAK3B,wMACI,6CAAuB,CAK3B,cACI,6CAAuB,CAD3B,cACI,6CAAuB,CAD3B,cACI,6CAAuB,CAD3B,cACI,6CAAuB,CAD3B,cACI,6CAAuB,CAD3B,cACI,6CAAuB,CAD3B,cACI,6CAAuB,CAD3B,cACI,6CAAuB,CAD3B,cACI,6CAAuB,CAD3B,cACI,6CAAuB,CAD3B,cACI,6CAAuB,CAD3B,cACI,6CAAuB,CAD3B,cACI,6CAAuB,CAD3B,cACI,6CAAuB,CAD3B,cACI,6CAAuB,CAD3B,cACI,6CAAuB,CAD3B,cACI,6CAAuB,CAD3B,cACI,6CAAuB,CAD3B,cACI,6CAAuB,CAD3B,cACI,6CAAuB,CAD3B,cACI,6CAAuB,CAD3B,cACI,6CAAuB,CAD3B,cACI,6CAAuB,CAD3B,cACI,6CAAuB,CAD3B,cACI,6CAAuB,CAD3B,cACI,6CAAuB,CAD3B,cACI,6CAAuB,CAD3B,cACI,6CAAuB,CAD3B,cACI,6CAAuB,CAD3B,cACI,6CAAuB,CAD3B,cACI,6CAAuB,CAD3B,cACI,6CAAuB,CAD3B,cACI,6CAAuB,CAD3B,cACI,6CAAuB,CAD3B,cACI,6CAAuB,CAD3B,cACI,6CAAuB,CAD3B,cACI,6CAAuB,CAD3B,cACI,6CAAuB,CAD3B,cACI,6CAAuB,CAD3B,cACI,6CAAuB,CAD3B,cACI,6CAAuB,CAD3B,cACI,6CAAuB,CAD3B,cACI,6CAAuB,CAD3B,cACI,6CAAuB,CAD3B,cACI,6CAAuB,CAD3B,cACI,6CAAuB,CAD3B,cACI,6CAAuB,CAD3B,cACI,6CAAuB,CAD3B,cACI,6CAAuB,CAD3B,cACI,6CAAuB,CAD3B,cACI,6CAAuB,CAD3B,cACI,6CAAuB,CAD3B,cACI,6CAAuB,CAD3B,cACI,6CAAuB,CAD3B,cACI,6CAAuB,CAD3B,cACI,6CAAuB,CAD3B,cACI,6CAAuB,CAD3B,cACI,6CAAuB,CAD3B,cACI,6CAAuB,CAD3B,cACI,6CAAuB,CAD3B,cACI,6CAAuB,CAD3B,cACI,6CAAuB,CAD3B,cACI,6CAAuB,CAD3B,cACI,6CAAuB,CAD3B,cACI,6CAAuB,CAD3B,cACI,6CAAuB,CAD3B,cACI,6CAAuB,CAD3B,cACI,6CAAuB,CAD3B,cACI,6CAAuB,CAD3B,cACI,6CAAuB,CAD3B,cACI,6CAAuB,CAD3B,cACI,6CAAuB,CAD3B,cACI,6CAAuB,CAD3B,cACI,6CAAuB,CAD3B,cACI,6CAAuB,CAD3B,cACI,6CAAuB,CAD3B,cACI,6CAAuB,CAD3B,cACI,6CAAuB,CAD3B,cACI,6CAAuB,CAD3B,cACI,6CAAuB,CAD3B,cACI,6CAAuB,CAD3B,cACI,6CAAuB,CAD3B,cACI,6CAAuB,CAD3B,cACI,6CAAuB,CAD3B,cACI,6CAAuB,CAD3B,cACI,6CAAuB,CAD3B,cACI,6CAAuB,CAD3B,cACI,6CAAuB,CAD3B,cACI,6CAAuB,CAD3B,cACI,6CAAuB,CAD3B,cACI,6CAAuB,CAD3B,cACI,6CAAuB,CAD3B,cACI,6CAAuB,CAD3B,cACI,6CAAuB,CAD3B,cACI,6CAAuB,CAD3B,cACI,6CAAuB,CAD3B,cACI,6CAAuB,CAD3B,cACI,6CAAuB,CAD3B,cACI,6CAAuB,CAD3B,cACI,6CAAuB,CAD3B,cACI,6CAAuB,CAD3B,cACI,6CAAuB,CAD3B,cACI,6CAAuB,CAD3B,cACI,6CAAuB,CAD3B,cACI,6CAAuB,CAD3B,cACI,6CAAuB,CAD3B,cACI,6CAAuB,CAD3B,cACI,6CAAuB,CAD3B,cACI,6CAAuB,CAD3B,cACI,6CAAuB,CAD3B,cACI,6CAAuB,CAD3B,cACI,6CAAuB,CAD3B,cACI,6CAAuB,CAD3B,cACI,6CAAuB,CAD3B,cACI,6CAAuB,CAD3B,cACI,6CAAuB,CAD3B,cACI,6CAAuB,CAD3B,cACI,6CAAuB,CAD3B,cACI,6CAAuB,CAD3B,cACI,6CAAuB,CAD3B,cACI,6CAAuB,CAD3B,cACI,6CAAuB,CAD3B,cACI,6CAAuB,CAD3B,cACI,6CAAuB,CAD3B,cACI,6CAAuB,CAD3B,cACI,6CAAuB,CAD3B,cACI,6CAAuB,CAD3B,cACI,6CAAuB,CAD3B,cACI,6CAAuB,CAD3B,cACI,6CAAuB,CAD3B,cACI,6CAAuB,CAD3B,cACI,6CAAuB,CAD3B,cACI,6CAAuB,CAD3B,cACI,6CAAuB,CAD3B,cACI,6CAAuB,CAD3B,cACI,6CAAuB,CAD3B,cACI,6CAAuB,CAD3B,cACI,6CAAuB,CAD3B,cACI,6CAAuB,CAD3B,cACI,6CAAuB,CAD3B,cACI,6CAAuB,CAD3B,cACI,6CAAuB,CAD3B,cACI,6CAAuB,CAD3B,cACI,6CAAuB,CAD3B,cACI,6CAAuB,CAD3B,cACI,6CAAuB,CAD3B,cACI,6CAAuB,CAD3B,cACI,6CAAuB,CAD3B,cACI,6CAAuB,CAD3B,cACI,6CAAuB,CAD3B,cACI,6CAAuB,CAD3B,cACI,6CAAuB,CAD3B,cACI,6CAAuB,CAD3B,cACI,6CAAuB,CAD3B,cACI,6CAAuB,CAD3B,cACI,6CAAuB,CAD3B,cACI,6CAAuB,CAD3B,cACI,6CAAuB,CAD3B,cACI,6CAAuB,CAD3B,cACI,6CAAuB,CAD3B,cACI,6CAAuB,CAD3B,cACI,6CAAuB,CAD3B,cACI,6CAAuB,CAD3B,cACI,6CAAuB,CAD3B,cACI,6CAAuB,CAD3B,cACI,6CAAuB,CAD3B,cACI,6CAAuB,CAD3B,cACI,6CAAuB,CAD3B,cACI,6CAAuB,CAD3B,cACI,6CAAuB,CAD3B,cACI,6CAAuB,CAD3B,cACI,6CAAuB,CAD3B,cACI,6CAAuB,CAD3B,cACI,6CAAuB,CAD3B,cACI,6CAAuB,CAD3B,cACI,6CAAuB,CAD3B,cACI,6CAAuB,CAD3B,cACI,6CAAuB,CAD3B,cACI,6CAAuB,CAD3B,cACI,6CAAuB,CAD3B,cACI,6CAAuB,CAD3B,cACI,6CAAuB,CAD3B,cACI,6CAAuB,CAD3B,cACI,6CAAuB,CAD3B,cACI,6CAAuB,CAD3B,cACI,6CAAuB,CAD3B,cACI,6CAAuB,CAD3B,cACI,6CAAuB,CAD3B,cACI,6CAAuB,CAD3B,cACI,6CAAuB,CAD3B,cACI,6CAAuB,CAD3B,cACI,6CAAuB,CAD3B,cACI,6CAAuB,CAD3B,cACI,6CAAuB,CAD3B,cACI,6CAAuB,CAD3B,cACI,6CAAuB,CAD3B,cACI,6CAAuB,CAD3B,cACI,6CAAuB,CAD3B,cACI,6CAAuB,CAD3B,cACI,6CAAuB,CAD3B,cACI,6CAAuB,CAD3B,cACI,6CAAuB,CAD3B,cACI,6CAAuB,CAD3B,cACI,6CAAuB,CAD3B,cACI,6CAAuB,CAD3B,cACI,6CAAuB,CAD3B,cACI,6CAAuB,CAD3B,cACI,6CAAuB,CAD3B,cACI,6CAAuB,CAD3B,cACI,6CAAuB,CAD3B,cACI,6CAAuB,CAD3B,cACI,6CAAuB,CAD3B,cACI,6CAAuB,CAD3B,cACI,6CAAuB,CAD3B,cACI,6CAAuB,CAD3B,cACI,6CAAuB,CAD3B,cACI,6CAAuB,CAD3B,cACI,6CAAuB,CAD3B,cACI,6CAAuB,CAD3B,cACI,6CAAuB,CAD3B,cACI,6CAAuB,CAD3B,cACI,6CAAuB,CAD3B,cACI,6CAAuB,CAD3B,cACI,6CAAuB,CAD3B,cACI,6CAAuB,CAD3B,cACI,6CAAuB,CAD3B,cACI,6CAAuB,CAD3B,cACI,6CAAuB,CAD3B,cACI,6CAAuB,CAD3B,cACI,6CAAuB,CAD3B,cACI,6CAAuB,CAD3B,cACI,6CAAuB,CAD3B,cACI,6CAAuB,CAD3B,cACI,6CAAuB,CAD3B,cACI,6CAAuB,CAD3B,cACI,6CAAuB,CAD3B,cACI,6CAAuB,CAD3B,cACI,6CAAuB,CAD3B,cACI,6CAAuB,CAD3B,cACI,6CAAuB,CAD3B,cACI,6CAAuB,CAD3B,cACI,6CAAuB,CAD3B,cACI,6CAAuB,CAD3B,cACI,6CAAuB,CAD3B,cACI,6CAAuB,CAD3B,cACI,6CAAuB,CAD3B,cACI,6CAAuB,CAD3B,cACI,6CAAuB,CAD3B,cACI,6CAAuB,CAD3B,cACI,6CAAuB,CC3EnC,WACI,oBAAqB,CACrB,iGAA6E,CCA5E,kBAEO,WAAY,CACZ,UAAW,CAInB,kBACI,mBAAa,CAAb,mBAAa,CAAb,YAAa,CACb,2BAAsB,CAAtB,4BAAsB,CAAtB,yBAAsB,CAAtB,qBAAsB,CACtB,uBAAuB,CAAvB,oBAAuB,CAAvB,sBAAuB,CACvB,UAAW,CC6Jb,wCDjKF,kBAOQ,6BAAmB,CAAnB,4BAAmB,CAAnB,sBAAmB,CAAnB,kBAAmB,CAE1B,CAGG,uCAEI,UAAW,CAGf,oBACI,YAAa,CACb,eAAgB,CAEZ,uBAAoB,CACpB,2BAAiB,CACjB,qBAAW,CANlB,mDAUO,yBAA0B,CAVjC,mDAcO,yBAA0B,CAdjC,uDAkBO,yBAA0B,CAlBjC,kDAsBO,yBAA0B,CC0HpC,yCDhJG,kDAyBW,uBAAwB,CAM/B,CCiHP,wCDhJG,kDA6BW,YAAa,CAEpB,CA/BJ,mDAkCO,yBAA0B,CAlCjC,qDAsCO,yBAA0B,CAtCjC,mDA0CO,mBAAoB,CA1C3B,oDA8CO,yBAA0B,CA9CjC,wGAmDO,yBAA0B,CC6FpC,yCDhJG,8CAwDW,YAAa,CAET,0BAAuB,CACvB,uBAAa,CAGxB,CCkFP,wCDhJE,oBAiEQ,YAAa,CACb,mBAAqB,CAE5B,CAED,mBACI,eAAgB,CADnB,yBAIO,yBAA2B,CCsErC,wCD1EE,mBAQQ,kBAAoB,CAuB3B,CA/BA,gCAaW,gBAAW,CACX,kBAAa,CAEjB,iBAAkB,CAEd,aAAS,CACT,eAAW,CCuDzB,wCD1EG,gCAuBW,eAAgB,CAEvB,CAzBJ,sBA4BO,kBE7HK,CF8HL,UE3HG,CF+HX,kBACI,mBAAsB,CACtB,eAAgB,CAChB,aAAc,CCsCpB,mCDzCE,kBAMQ,kBAAoB,CACpB,cAAe,CACf,kBAAmB,CAE1B","file":"single-wpcm_staff.css","sourcesContent":["$path: '../img/flags/';\n$flag: '#{$path}4x3/';\n$square: '#{$path}1x1/';\n$countries:(af ax al dz as ad ao ai aq ag ar am aw au at az bs bh bd bb by be bz bj bm bt bo ba bw bv br io bn bg bf bi\nkh cm ca cv ct ky cf td cl cn cx cc co km cg cd ck cr hr cu cy cz dk dj dm do ec eg sv en gq er ee et fk fo fj fi fr gf\npf tf ga gm ge de gh gi gr gl gd gp gu gt gg gn gw gy ht hm va hn hk hu is in id ir iq ie im il it ci jm jp je jo kz ke\nki ks kw kg la lv lb ls lr ly li lt lu mo mk mg mw my mv ml mt mh mq mr mu yt mx fm md mc mn ms me ma kp mz mm na nr np\nnl nc nz ni ne ng nu nf nd mp no om pk pw ps pa pg py pe ph pn pl pt pr qa re ro ru rw sh kn lc pm vc ws sm st sa sf sn\nrs sc sl sg sk si sb so za gs kr es lk sj sd sr sz se ch sy tw tj tz th tl tg tk to tt tn tr tm tc tv ug ua ae gb us uy\num uz vu ve vn vg vi wl wf eh ye an zm zw);\n$england:(brighton camborne cambridge coventry gloucester guildford henly-on-thames hersham leeds london melrose\nnorthampton otley stockport sunbury-on-thames twickenham worcester);\n$ireland:(castlereagh);\n$scotland:(aberdeen edinburgh galashiels scotstoun);\n$wales:(brecon cardiff colwyn-bay crosskeys ebbw-vale neath newport pontypool pontypridd whitland);\n\n.flag-icon {\n    background: {\n        size: cover;\n        position: 50%;\n        repeat: no-repeat;\n    }\n    position: relative;\n    display: inline-block;\n    width: 1.33333333em;\n    line-height: 1;\n    padding: 0.15em;\n    box-shadow: 0 0 1px;\n\n    &::before {\n        content: '\\00a0';\n    }\n\n    &-background {\n        background: {\n            size: cover;\n            position: 50%;\n            repeat: no-repeat;\n        }\n        box-shadow: 0 0 1px;\n        padding: 13px 17.3333px;\n        margin: 0 auto;\n        width: 0;\n        height: 0;\n    }\n\n    &-squared {\n        width: 1em;\n    }\n\n    @each $town in $england {\n        &-#{unquote($town)} {\n            background-image: url(#{$flag}en.svg);\n        }\n    }\n\n    @each $town in $ireland {\n        &-#{unquote($town)} {\n            background-image: url(#{$flag}ie.svg);\n        }\n    }\n\n    @each $town in $scotland {\n        &-#{unquote($town)} {\n            background-image: url(#{$flag}sf.svg);\n        }\n    }\n\n    @each $town in $wales {\n        &-#{unquote($town)} {\n            background-image: url(#{$flag}wl.svg);\n        }\n    }\n\n    @each $country in $countries {\n        &-#{$country} {\n            background-image: url(#{$flag}#{$country}.svg);\n        }\n    }\n}\n","$font__path: '/wp-content/themes/rugbydb/dist/fonts';\n@font-face {\n    font-family: USARugby;\n    src: url('#{$font__path}/AGLettericaCondL-BoldItalic.ttf') format('truetype');\n}\n\n$font__default: -apple-system, blinkmacsystemfont, 'Segoe UI', roboto, sans-serif;\n$font__main: titillium-web, $font__default;\n$font__code: monaco, consolas, 'andale mono', 'DejaVu Sans Mono', monospace;\n$font__pre: 'Courier 10 Pitch', courier, monospace;\n$font__line-height-body: 1.5;\n$font__line-height-pre: 1.6;\n$font__logo: USARugby, titillium-web, sans-serif;\n$font__post-title: industry, titillium-web, sans-serif;\n$font__post-content: $font__main;\n","@import '../abstracts/abstracts';\n\n.wpcm {\n    &_staff {\n        .icon {\n            height: 22px;\n            float: left;\n        }\n    }\n\n    &-player-info {\n        display: flex;\n        flex-direction: column;\n        justify-content: center;\n        float: none;\n\n        @include breakpoint(wordpress) {\n            flex-direction: row;\n        }\n    }\n\n    &-profile {\n        &-image,\n        &-meta {\n            width: 100%;\n        }\n\n        &-image {\n            height: 320px;\n            margin-bottom: 0;\n            background: {\n                position: center top;\n                repeat: no-repeat;\n                size: cover;\n            }\n\n            &[data-interchange*='dave-hewitt'] {\n                background-position-y: 23%;\n            }\n\n            &[data-interchange*='duncan-hall'] {\n                background-position-y: 50%;\n            }\n\n            &[data-interchange*='eddie-osullivan'] {\n                background-position-y: 17%;\n            }\n\n            &[data-interchange*='jack-clark'] {\n                background-position-y: 33%;\n\n                @include breakpoint(medium down) {\n                    background-size: contain;\n                }\n\n                @include breakpoint(wordpress) {\n                    height: 310px;\n                }\n            }\n\n            &[data-interchange*='jim-perkins'] {\n                background-position-y: 40%;\n            }\n\n            &[data-interchange*='john-mitchell'] {\n                background-position-y: 30%;\n            }\n\n            &[data-interchange*='mike-friday'] {\n                background-size: 62%;\n            }\n\n            &[data-interchange*='ray-cornbill'] {\n                background-position-y: 27%;\n            }\n\n            &[data-interchange*='george-hook'],\n            &[data-interchange*='scott-johnson'] {\n                background-position-y: 50%;\n            }\n\n            &[data-interchange*='tolkin'] {\n                @include breakpoint(medium down) {\n                    height: 533px;\n                    background: {\n                        position: center bottom;\n                        size: contain;\n                    }\n                }\n            }\n\n            @include breakpoint(wordpress) {\n                height: 298px;\n                padding-right: 0.5rem;\n            }\n        }\n\n        &-meta {\n            margin-bottom: 0;\n\n            table {\n                margin-bottom: 0 !important;\n            }\n\n            @include breakpoint(wordpress) {\n                padding-left: 0.5rem;\n            }\n\n            .entry-title {\n                margin: {\n                    top: 0.25em;\n                    bottom: 0.4em;\n                }\n                text-align: center;\n                font: {\n                    size: 2em;\n                    weight: 900;\n                }\n\n                @include breakpoint(wordpress) {\n                    text-align: left;\n                }\n            }\n\n            th {\n                background: $color__background-th;\n                color: $color__white;\n            }\n        }\n\n        &-bio {\n            padding: 0 0.5em 0.5em;\n            margin-bottom: 0;\n            font-size: 80%;\n\n            @include breakpoint(medium) {\n                padding: 0 0.9375rem;\n                font-size: 100%;\n                text-align: justify;\n            }\n        }\n    }\n}\n","// Foundation for Sites by ZURB\n// foundation.zurb.com\n// Licensed under MIT Open Source\n\n////\n/// @group breakpoints\n////\n\n/// A list of named breakpoints. You can use these with the `breakpoint()` mixin to quickly create media queries.\n/// @type Map\n$breakpoints: (\n  small: 0,\n  medium: 640px,\n  large: 1024px,\n  xlarge: 1200px,\n  xxlarge: 1440px,\n) !default;\n\n/// The largest named breakpoint in which to include print as a media type\n/// @type Keyword\n$print-breakpoint: large !default;\n\n$-zf-zero-breakpoint: small !default;\n\n$-zf-breakpoints-keys: map-to-list($breakpoints, 'keys');\n\n@if nth(map-values($breakpoints), 1) != 0 {\n  @error 'The first key in the $breakpoints map must have a value of \"0\".';\n}\n@else {\n  $-zf-zero-breakpoint: nth(map-keys($breakpoints), 1);\n}\n\n/// All of the names in this list will be output as classes in your CSS, like `.small-12`, `.medium-6`, and so on. Each value in this list must also be in the `$breakpoints` map.\n/// @type List\n$breakpoint-classes: (small medium large) !default;\n\n/// Generates a media query string matching the input value. Refer to the documentation for the `breakpoint()` mixin to see what the possible inputs are.\n///\n/// @param {Keyword|Number} $val [small] - Breakpoint name, or px, rem, or em value to process.\n@function breakpoint($val: $-zf-zero-breakpoint) {\n  // Size or keyword\n  $bp: nth($val, 1);\n  // Value for max-width media queries\n  $bp-max: 0;\n  // Direction of media query (up, down, or only)\n  $dir: if(length($val) > 1, nth($val, 2), up);\n  // Eventual output\n  $str: '';\n  // Is it a named media query?\n  $named: false;\n\n  // Orientation media queries have a unique syntax\n  @if $bp == 'landscape' or $bp == 'portrait' {\n    @return '(orientation: #{$bp})';\n  }\n  @else if $bp == 'retina' {\n    @return '(-webkit-min-device-pixel-ratio: 2), (min-resolution: 192dpi)';\n  }\n\n  // Try to pull a named breakpoint out of the $breakpoints map\n  @if type-of($bp) == 'string' {\n    @if map-has-key($breakpoints, $bp) {\n      @if $dir == 'only' or $dir == 'down' {\n        $bp-max: -zf-map-next($breakpoints, $bp);\n      }\n\n      $bp: map-get($breakpoints, $bp);\n      $named: true;\n    }\n    @else {\n      $bp: 0;\n      @warn 'breakpoint(): \"#{$val}\" is not defined in your $breakpoints setting.';\n    }\n  }\n\n  // Convert any pixel, rem, or unitless value to em\n  $bp: -zf-bp-to-em($bp);\n  // Max value is 0.2px under the next breakpoint (0.02 / 16 = 0.00125).\n  // Use a precision under 1px to support browser zoom, but not to low to avoid rounding.\n  // See https://github.com/zurb/foundation-sites/issues/11313\n  @if $bp-max {\n    $bp-max: -zf-bp-to-em($bp-max) - .00125;\n  }\n\n  // Conditions to skip media query creation\n  // - It's a named breakpoint that resolved to \"0 down\" or \"0 up\"\n  // - It's a numeric breakpoint that resolved to \"0 \" + anything\n  @if $bp > 0em or $dir == 'only' or $dir == 'down' {\n    // `only` ranges use the format `(min-width: n) and (max-width: n)`\n    @if $dir == 'only' {\n      // Only named media queries can have an \"only\" range\n      @if $named == true {\n        // Only use \"min-width\" if the floor is greater than 0\n        @if $bp > 0em {\n          $str: $str + '(min-width: #{$bp})';\n\n          // Only add \"and\" to the media query if there's a ceiling\n          @if $bp-max != null {\n            $str: $str + ' and ';\n          }\n        }\n\n        // Only use \"max-width\" if there's a ceiling\n        @if $bp-max != null {\n          $str: $str + '(max-width: #{$bp-max})';\n        }\n      }\n      @else {\n        @warn 'breakpoint(): Only named media queries can have an `only` range.';\n      }\n    }\n\n    // `down` ranges use the format `(max-width: n)`\n    @else if $dir == 'down' {\n      $max: if($named, $bp-max, $bp);\n\n      // Skip media query creation if input value is exactly \"0 down\",\n      // unless the function was called as \"small down\", in which case it's just \"small only\"\n      @if $named or $bp > 0em {\n        @if $max != null {\n          $str: $str + '(max-width: #{$max})';\n        }\n      }\n    }\n\n    // `up` ranges use the format `(min-width: n)`\n    @else if $bp > 0em {\n      $str: $str + '(min-width: #{$bp})';\n    }\n  }\n\n  @return $str;\n}\n\n/// Wraps a media query around the content you put inside the mixin. This mixin accepts a number of values:\n///  - If a string is passed, the mixin will look for it in the `$breakpoints` map, and use a media query there.\n///  - If a pixel value is passed, it will be converted to an em value using `$global-font-size` as the base.\n///  - If a rem value is passed, the unit will be changed to em.\n///  - If an em value is passed, the value will be used as-is.\n///\n/// @param {Keyword|Number} $value - Breakpoint name, or px, rem, or em value to process.\n///\n/// @output If the breakpoint is \"0px and larger\", outputs the content as-is. Otherwise, outputs the content wrapped in a media query.\n@mixin breakpoint($value) {\n  $str: breakpoint($value);\n  $bp: index($-zf-breakpoints-keys, $value);\n  $pbp: index($-zf-breakpoints-keys, $print-breakpoint);\n\n  $old-zf-size: null;\n\n  // Make breakpoint size available as a variable\n  @if global-variable-exists(-zf-size) {\n    $old-zf-size: $-zf-size;\n  }\n  $-zf-size: nth($value, 1) !global; // get the first value to account for `only` and `down` keywords\n\n  // If $str is still an empty string, no media query is needed\n  @if $str == '' {\n    @content;\n  }\n\n  // Otherwise, wrap the content in a media query\n  @else {\n    // For named breakpoints less than or equal to $print-breakpoint, add print to the media types\n    @if $bp != null and $bp <= $pbp {\n      @media print, screen and #{$str} {\n        @content;\n       }\n    }\n    @else {\n      @media screen and #{$str} {\n        @content;\n      }\n    }\n  }\n\n  $-zf-size: $old-zf-size !global;\n}\n\n/// Converts the breakpoints map to a URL-encoded string, like this: `key1=value1&key2=value2`. The value is then dropped into the CSS for a special `<meta>` tag, which is read by the Foundation JavaScript. This is how we transfer values from Sass to JavaScript, so they can be defined in one place.\n/// @access private\n///\n/// @param {Map} $map - Map to convert.\n///\n/// @returns {String} A string containing the map's contents.\n@function -zf-bp-serialize($map) {\n  $str: '';\n  @each $key, $value in $map {\n    $str: $str + $key + '=' + -zf-bp-to-em($value) + '&';\n  }\n  $str: str-slice($str, 1, -2);\n\n  @return $str;\n}\n\n/// Find the next key in a map.\n/// @access private\n///\n/// @param {Map} $map - Map to traverse.\n/// @param {Mixed} $key - Key to use as a starting point.\n///\n/// @returns {Mixed} The value for the key after `$key`, if `$key` was found. If `$key` was not found, or `$key` was the last value in the map, returns `null`.\n@function -zf-map-next($map, $key) {\n\n  // Store the keys of the map as a list\n  $values: map-keys($map);\n\n  $i: 0;\n\n  // If the Key Exists, Get the index of the key within the map and add 1 to it for the next breakpoint in the map\n  @if (map-has-key($map, $key)) {\n    $i: index($values, $key) + 1;\n  }\n\n  // If the key doesn't exist, or it's the last key in the map, return null\n  @if ($i > length($map) or $i == 0) {\n    @return null;\n  }\n  // Otherwise, return the value\n  @else {\n    @return map-get($map, nth($values, $i));\n  }\n\n}\n\n/// Return a list of our named breakpoints less than $key. Useful for dealing with\n/// responsive gutters for the grid.\n/// @access private\n///\n/// @param {String} $key - Key to use as last breakpoint.\n///\n/// @returns {Array} The list of breakpoints up to and. If $key is auto, returns breakpoints above the zero\n@function -zf-breakpoints-less-than($key) {\n  $list: ();\n  $found_key: false;\n\n  @each $name in $-zf-breakpoints-keys {\n    @if ($name == $key) {\n      $found_key: true;\n    }\n    @if not $found_key {\n      $list: append($list, $name);\n    }\n  }\n  @return $list;\n}\n\n/// Return a list of our named breakpoints less than $key. Useful for dealing with\n/// responsive gutters for the grid.\n/// @access private\n///\n/// @param {String} $breakpoint - a named or non-named breakpoint.\n///\n/// @returns {Array} The list of breakpoints up to and. If $key is auto, returns breakpoints above the zero\n@function -zf-closest-named-breakpoint($breakpoint) {\n  $last: $-zf-zero-breakpoint;\n  $found: false;\n\n  $value: unitless-calc($breakpoint, 1px);\n  @each $key, $val in $breakpoints {\n    @if not $found {\n      @if unitless-calc($val) > $value {\n        $found: true;\n      } @else {\n        $last: $key;\n      }\n    }\n  }\n\n  @return $last;\n}\n\n/// Get a value for a breakpoint from a responsive config map or single value.\n/// - If the config is a single value, return it regardless of `$value`.\n/// - If the config is a map and has the key `$value`, the exact breakpoint value is returned.\n/// - If the config is a map and does *not* have the breakpoint, the value matching the next lowest breakpoint in the config map is returned.\n/// @access private\n///\n/// @param {Number|Map} $map - Responsive config map or single value.\n/// @param {Keyword} $value - Breakpoint name to use.\n///\n/// @return {Mixed} The corresponding breakpoint value.\n@function -zf-get-bp-val($map, $value) {\n  // If the given map is a single value, return it\n  @if type-of($map) == 'number' {\n    @return $map;\n  }\n\n\n  // Check if the breakpoint name exists globally\n  @if not map-has-key($breakpoints, $value) {\n    @if type-of($value) == 'number' {\n      $value: -zf-closest-named-breakpoint($value);\n    } @else {\n      @return null;\n    }\n  }\n  // Check if the breakpoint name exists in the local config map\n  @else if map-has-key($map, $value) {\n    // If it does, just return the value\n    @return map-get($map, $value);\n  }\n  // Otherwise, find the next lowest breakpoint and return that value\n  @else {\n    $anchor: null;\n    $found: false;\n\n    @each $key, $val in $breakpoints {\n      @if not $found {\n        @if map-has-key($map, $key) {\n          $anchor: $key;\n        }\n        @if $key == $value {\n          $found: true;\n        }\n      }\n    }\n\n    @return map-get($map, $anchor);\n  }\n}\n\n$small-up: '';\n$small-only: '';\n\n@if map-has-key($breakpoints, small) {\n  $small-up: screen;\n  $small-only: unquote('screen and #{breakpoint(small only)}');\n}\n\n$medium-up: '';\n$medium-only: '';\n\n@if map-has-key($breakpoints, medium) {\n  $medium-up: unquote('screen and #{breakpoint(medium)}');\n  $medium-only: unquote('screen and #{breakpoint(medium only)}');\n}\n\n$large-up: '';\n$large-only: '';\n\n@if map-has-key($breakpoints, large) {\n  $large-up: unquote('screen and #{breakpoint(large)}');\n  $large-only: unquote('screen and #{breakpoint(large only)}');\n}\n\n$xlarge-up: '';\n$xlarge-only: '';\n\n@if map-has-key($breakpoints, xlarge) {\n  $xlarge-up: unquote('screen and #{breakpoint(xlarge)}');\n  $xlarge-only: unquote('screen and #{breakpoint(xlarge only)}');\n}\n\n$xxlarge-up: '';\n\n@if map-has-key($breakpoints, xxlarge) {\n  $xxlarge-up: unquote('screen and #{breakpoint(xxlarge)}');\n}\n","$color__blue: #152C53;\n$color__red: #C42032;\n$color__black: #000;\n$color__white: #fff;\n\n$color__background-body: $color__blue;\n$color__background-header: rgba(16, 33, 63, 0.85);\n$color__background-combo: #102342;\n$color__background-main: #f5f5f5;\n$color__background-screen: #f1f1f1;\n$color__background-hr: #e0e0e0;\n$color__background-button: #e6e6e6;\n$color__background-pre: #eee;\n$color__background-ins: #fff9c0;\n$color__background-th: $color__blue;\n\n$color__text-screen: #21759b;\n$color__text-input: #555;\n$color__text-input-focus: #111;\n$color__text-inset: $color__white;\n$color__text-shadow: $color__black;\n\n$color__link: #9e0b2a;\n$color__link-visited: #9e0b2a;\n$color__link-hover: #191970;\n\n$color__logo-blue: #06355e;\n$color__logo-red: #9e0b2a;\n\n$color__text-main: #404040;\n\n$color__border-button: #ccc #ccc #bbb;\n$color__border-button-hover: #ccc #bbb #aaa;\n$color__border-button-focus: #aaa #bbb #bbb;\n$color__border-header: rgba(255, 255, 255, 0.4);\n$color__border-input: #ccc;\n$color__border-abbr: #777;\n\n$color__logo-text: $color__background-main;\n\n// Foundation.\n$white: $color__text-inset;\n$primary-color: $color__blue;\n$light-gray: $color__background-main;\n$body-font-color: $color__text-main;\n"]}